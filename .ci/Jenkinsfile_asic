@Library("jenlib") _

Closure cleanupSteps = {
	// NOTE: sudo commands have been manually permitted
	// remove sandboxes
	sh "sudo /bin/rm -rf \"${WORKSPACE}/sandboxes/\" || exit 0"
	// remove tmp (not only for spack)
	sh "sudo /bin/rm -rf \"/tmp/${NODE_NAME}/\""
	// the spack repository gets bind mounted into the sandbox and owned by
	// spack user during build -> revert prior to cleaning worksapce
	sh "[ -d \"$WORKSPACE/spack\" ] && sudo chown -R vis_jenkins \"$WORKSPACE/spack\" || true"
	cleanWs(patterns: [[pattern: 'download_cache/', type: 'EXCLUDE']],
	        deleteDirs: true)
}

pipeline {
	agent none

	options {
		timestamps()
		skipDefaultCheckout()
	}

	parameters {
		string(name: 'BUILD_CACHE_NAME',
			   defaultValue: 'asic_init_from_2021-06-18_1',
			   description: 'Which buildcache to use? They reside under $HOME/build_caches/$BUILD_CACHE_NAME and will be created if they do not exist.')
	}

	environment {
		YASHCHIKI_HOST_ENV_PATH = "${WORKSPACE}/host.env"
	}

	stages {
		stage('Container Build') {
			// TODO: remove once unused
			environment {
				CONTAINER_STYLE = "asic"
				YASHCHIKI_INSTALL = "${WORKSPACE}/yashchiki"
				YASHCHIKI_META_DIR = "${WORKSPACE}/meta"
				YASHCHIKI_CACHES_ROOT = "${HOME}"
				YASHCHIKI_SPACK_PATH = "${env.WORKSPACE}/spack"
				YASHCHIKI_SANDBOXES = "sandboxes"
				YASHCHIKI_PROXY_HTTP = "http://proxy.kip.uni-heidelberg.de:8080"
				YASHCHIKI_PROXY_HTTPS = "http://proxy.kip.uni-heidelberg.de:8080"
				BUILD_CACHE_NAME = "${params.BUILD_CACHE_NAME}"  // propagate parameter to environment
			}
			agent { label 'conviz1||conviz2' }
			stages {
				stage('Pre-build Cleanup') {
					steps {
						script {
							cleanupSteps()
						}
					}
				}
				stage('yashchiki Checkout') {
					steps {
						script {
							sh "git clone ssh://hudson@brainscales-r.kip.uni-heidelberg.de:29418/waf.git symwaf2ic"
							sh "cd symwaf2ic && singularity exec /containers/stable/latest make"
							if (!env.GERRIT_CHANGE_NUMBER) {
								sh "singularity exec /containers/stable/latest ./symwaf2ic/waf setup --project=yashchiki --clone-depth=2"
							} else {
								sh "singularity exec /containers/stable/latest ./symwaf2ic/waf setup --project=yashchiki --clone-depth=2 --gerrit-changes=${GERRIT_CHANGE_NUMBER} --gerrit-url=ssh://hudson@${GERRIT_HOST}:${GERRIT_PORT}"
							}
							sh "singularity exec /containers/stable/latest ./symwaf2ic/waf configure install"
						}
					}
				}
				stage('Deploy utilities') {
					steps {
						sh "bash bin/yashchiki_deploy_utilities.sh"
					}
				}
				stage('Dump Meta Info') {
					steps {
						sh "mkdir -p ${YASHCHIKI_META_DIR}"
						sh "bash bin/yashchiki_dump_meta_info.sh"
						script {
							if (isTriggeredByGerrit()) {
								sh "bash bin/yashchiki_notify_gerrit.sh -m 'Build containing this change started..'"
							}
						}
					}
				}
				stage('Build container image') {
					steps {
						script {
							try {
								sh "python3 bin/yashchiki visionary ${WORKSPACE}/spack singularity_asic_temp.img " +
								   "--log-dir=log " +
								   "--proxy-${YASHCHIKI_PROXY_HTTP} " +
								   "--proxy-https=${YASHCHIKI_PROXY_HTTPS} " +
								   "--tmp-subdir=${env.NODE_NAME} " +
								   "--meta-dir=${YASHCHIKI_META_DIR} " +
								   "--caches-dir=${YASHCHIKI_CACHES_ROOT} " +
								   "--build-cache-name=${BUILD_CACHE_NAME} " +
								   "--sandboxes-dir=${YASHCHIKI_SANDBOXES} " +
								   "--host-env-filename=${WORKSPACE}/host.env " +
								   ("${CONTAINER_BUILD_TYPE}" == "stable" ? "--update-build-cache " : "") +
								   "--recipe-filename=${WORKSPACE}/asic_recipe.def "
							} catch (Throwable t) {
								archiveArtifacts "errors_concretization.log"
								throw t
							}
							archiveArtifacts(artifacts: "sandboxes/*/opt/spack_specs/*.yaml", allowEmptyArchive: true)
							archiveArtifacts(artifacts: "log/*.log", allowEmptyArchive: true)
						}
					}
				}
				stage('Export container') {
					steps {
						script {
							// we only want the container name, tail everything else
							CONTAINER_IMAGE = sh(script: "bin/yashchiki_deploy_container.sh | tail -n 1", returnStdout: true).trim()
							if (isTriggeredByGerrit()) {
								sh "bash bin/yashchiki_notify_gerrit.sh -t Build -c \"$CONTAINER_IMAGE\""
							}
						}
					}
				}
			}
			post {
				failure {
					script {
						cache_failed = sh(script: "lib/yashchiki/create_temporary_build_cache_after_failure.sh", returnStdout: true).trim()
						if (isTriggeredByGerrit()) {
							sh "bash bin/yashchiki_notify_gerrit.sh -v -1 -t Build -m \"Successfully built packages stored in cache. Resume by issuing:\nWITH_CACHE_NAME=${cache_failed}\n\nIn your next gerrit comment, NOT commit message!\""
						}
					}
				}
				cleanup {
					archiveArtifacts "host.env"
					archiveArtifacts "out_singularity_build_asic_recipe.txt"
					// Clean build artifacts because otherwise the latest build from each jenkins job can take up to 50GB.
					// 2 executors and 5 Jenkins-Jobs (testing, testing-spack, testing-asic, stable, stable-asic) will slowly but surely eat away memory.
					script {
						cleanupSteps()
					}
				}
			}
		}

		// Container verification stage: Build visionary metaprojects
		stage('Container Verification') {
			parallel {
				stage('tools-xilinx') {
					steps {
						build(job: 'bld_gerrit_tools-xilinx_dependencies',
						      parameters: [string(name: 'OVERWRITE_DEFAULT_ASIC_CONTAINER_IMAGE',
						                          value: CONTAINER_IMAGE)])
					}
				}
			}
		}
	}
	post {
		failure {
			notifyFailure(mattermostChannel: "#spack")
		}
	}
}
