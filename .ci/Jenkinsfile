@Library("jenlib") _

Closure cleanupSteps = {
	// NOTE: sudo commands have been manually permitted
	// remove sandboxes
	sh "sudo /bin/rm -rf \"${WORKSPACE}/sandboxes/\" || exit 0"
	// remove tmp spack
	sh "sudo /bin/rm -rf \"/tmp/${NODE_NAME}/\""
	// the spack repository gets bind mounted into the sandbox and owned by
	// spack user during build -> revert prior to cleaning worksapce
	sh "[ -d \"$WORKSPACE/spack\" ] && sudo chown -R vis_jenkins \"$WORKSPACE/spack\" || true"
	cleanWs(patterns: [[pattern: 'download_cache/', type: 'EXCLUDE']],
	        deleteDirs: true)
}

pipeline {
	agent none

	options {
		timestamps()
		skipDefaultCheckout()
	}

	parameters {
		string(name: 'BUILD_CACHE_NAME',
			   defaultValue: 'gcc_10',
			   description: 'Which buildcache to use? They reside under $HOME/build_caches/$BUILD_CACHE_NAME and will be created if they do not exist.')
	}

	stages {
		stage('Container Build') {
			agent { label 'conviz1||conviz2' }
			environment {
				// FIXME: ^${DEPENDENCY_PYTHON} is a workaround for an invalid spectrum-mpi concretization
				DEPENDENCY_PYTHON = "python@2.7.18"
				// This needs to be here because otherwise the default python
				// (2.7.18) will pollute the spec and lead to a conflict
				// can be removed as soon as the explicit preferred version
				// is dropped
				DEPENDENCY_PYTHON3 = "python@3.8.2"
				VISIONARY_GCC_VERSION = "10.1.0"
				VISIONARY_GCC = "gcc@${VISIONARY_GCC_VERSION}"
				TMPDIR = "/tmp/${env.NODE_NAME}"
				JOB_TMP_SPACK = sh(script: "mkdir -p ${env.TMPDIR} &>/dev/null; mktemp -d ${env.TMPDIR}/spack-XXXXXXXXXX",
				                   returnStdout: true).trim()
				BUILD_CACHE_NAME = "${params.BUILD_CACHE_NAME}"  // propagate parameter to environment
			}
			stages {
				stage('Pre-build Cleanup') {
					steps {
						script {
							cleanupSteps()
						}
						sh "mkdir -p \"${env.JOB_TMP_SPACK}\" && chmod 777 \"${env.JOB_TMP_SPACK}\""
					}
				}
				stage('yashchiki Checkout') {
					steps {
						checkout scm
					}
				}
				stage('Validate environment') {
					steps {
						sh ".ci/validate_environment.sh"
					}
				}
				stage('Spack Clone') {
					steps {
						script {
							try {
								sh ".ci/clone.sh"
							}
							catch (Throwable t) {
								archiveArtifacts "errors_concretization.log"
								throw t
							}
						}
					}
				}
				stage('Deploy utilities') {
					steps {
						sh ".ci/deploy_utilities.sh"
					}
				}
				stage('Create visionary recipe') {
					steps {
						sh ".ci/create_visionary_recipe.sh"
					}
				}
				stage('Build sandbox') {
					steps {
						sh ".ci/build_sandbox.sh"
					}
				}
				stage('Build container image') {
					steps {
						sh ".ci/build_image.sh"
					}
				}
				stage('Update build cache and export container') {
					steps {
						script {
							// we only want the container name, tail everything else
							CONTAINER_NAME = sh(script: ".ci/deploy_container.sh | tail -n 1", returnStdout: true).trim()
						}
						sh ".ci/update_build_cache.sh -c \"$CONTAINER_NAME\""
					}
				}
			}
			post {
				cleanup {
					archiveArtifacts "jenkins.env"
					script {
						cleanupSteps()
					}
				}
			}
		}

		// Container verification stage: Build visionary metaprojects
		stage('Container Verification') {
			parallel {

				// BSS1
				stage('NMPM Software') {
					steps {
						build(job: 'bld_gerrit-meta-nmpm-software',
						      parameters: [string(name: 'CONTAINER_IMAGE', value: CONTAINER_NAME)])
					}
				}

				// BSS2
				stage('PPU Toolchain') {
					steps {
						build(job: 'bld_gerrit-ppu-toolchain-dependencies',
						      parameters: [string(name: 'OVERWRITE_DEFAULT_CONTAINER_IMAGE', value: CONTAINER_NAME)])
					}
				}
				stage('haldls') {
					steps {
						build(job: 'bld_gerrit-haldls-dependencies',
						      parameters: [string(name: 'OVERWRITE_DEFAULT_CONTAINER_IMAGE', value: CONTAINER_NAME)])
					}
				}

				// HDBIOAI project code
				stage('HDBIOAI project') {
					steps {
						build(job: 'bld_gerrit-model-hw-hdbioai-dependencies',
							  parameters: [string(name: 'OVERWRITE_DEFAULT_CONTAINER_IMAGE', value: CONTAINER_NAME)])
					}
				}
				// neuromorphic sampling library
				stage('model-nmsampling-sbs') {
					steps {
						build(job: 'bld_gerrit_model-nmsampling-sbs_dependencies',
							  parameters: [string(name: 'OVERWRITE_DEFAULT_CONTAINER_IMAGE', value: CONTAINER_NAME)])
					}
				}
				// Visionary KiCad library
				stage('pcb-kicad-lib') {
					steps {
						build(job: 'bld_gerrit_pcb-kicad-lib_dependencies',
							  parameters: [string(name: 'OVERWRITE_DEFAULT_CONTAINER_IMAGE', value: CONTAINER_NAME)])
					}
				}
			}
		}
	}
	post {
		failure {
			notifyFailure(mattermostChannel: "#spack")
		}
	}
}
