Closure cleanupSteps = {
	sh ".ci/remove_sandboxes.sh"
	sh ".ci/remove_tmp_spack.sh"
	cleanWs(patterns: [[pattern: 'download_cache/', type: 'EXCLUDE']],
	        deleteDirs: true)
}

pipeline {
	agent { label 'conviz||conviz2' }
	environment {
		/* FIXME: ^${DEPENDENCY_PYTHON} is a workaround for an invalid spectrum-mpi concretization */
		DEPENDENCY_PYTHON="python@2.7.15"
		VISIONARY_GCC_VERSION="8.2.0"
		VISIONARY_GCC="gcc@${VISIONARY_GCC_VERSION}"
		JOB_TMP_SPACK=sh(script: "mktemp -d /tmp/spack-XXXXXXXXXX",
				returnStdout: true).trim()
	}
	stages {
		stage('Validate environment') {
			steps {
				sh ".ci/validate_environment.sh"
			}
		}
		stage('Pre-build Cleanup') {
			steps {
				script {
					cleanupSteps()
				}
				sh "mkdir \"${env.JOB_TMP_SPACK}\" && chmod 777 \"${env.JOB_TMP_SPACK}\""
			}
		}
		stage('Clone') {
			steps {
				checkout scm
				sh ".ci/clone.sh"
			}
		}
		stage('Deploy utilities')
		{
			steps {
				sh ".ci/deploy_utilities.sh"
			}
		}
		stage('Create visionary recipe') {
			steps {
				sh ".ci/create_visionary_recipe.sh"
			}
		}
		stage('Build container') {
			steps {
				sh ".ci/build_container.sh"
			}
		}
		stage('Update build cache') {
			steps {
				sh ".ci/update_build_cache.sh"
			}
		}
		stage('Export') {
			steps {
				sh ".ci/deploy_container.sh"
				echo "TODO skipping (due to disk usage problems on jenviz): archiveArtifacts artifacts: '*.img', onlyIfSuccessful: true"
			}
		}
	}

	post {
		cleanup {
			script {
				cleanupSteps()
			}
		}
	}
}
