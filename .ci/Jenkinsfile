@Library("jenlib") _

Closure cleanupSteps = {
	// NOTE: sudo commands have been manually permitted
	// remove sandboxes
	sh "sudo /bin/rm -rf \"${WORKSPACE}/sandboxes/\" || exit 0"
	// remove tmp spack
	sh "sudo /bin/rm -rf \"/tmp/${NODE_NAME}/\""
	// the spack repository gets bind mounted into the sandbox and owned by
	// spack user during build -> revert prior to cleaning worksapce
	sh "[ -d \"$WORKSPACE/spack\" ] && sudo chown -R vis_jenkins \"$WORKSPACE/spack\" || true"
	cleanWs(patterns: [[pattern: 'download_cache/', type: 'EXCLUDE']],
	        deleteDirs: true)
}

Map<String, Object> verificationStages = [
	visionary: [
		// BSS1
		[name: "NMPM Software",
		 job: "bld_gerrit-meta-nmpm-software",
		 container_image_parameter: "OVERWRITE_DEFAULT_CONTAINER_IMAGE"],
		// BSS2
		[name: "PPU Toolchain",
		 job: "bld_gerrit-ppu-toolchain-dependencies",
		 container_image_parameter: "OVERWRITE_DEFAULT_CONTAINER_IMAGE"],
		[name: "haldls",
		 job: "bld_gerrit-haldls-dependencies",
		 container_image_parameter: "OVERWRITE_DEFAULT_CONTAINER_IMAGE"],
		[name: "hxtorch",
		 job: "bld_gerrit-hxtorch-dependencies",
		 container_image_parameter: "OVERWRITE_DEFAULT_CONTAINER_IMAGE"],
		[name: "pynn-brainscales",
		 job: "bld_gerrit-pynn-brainscales-dependencies",
		 container_image_parameter: "OVERWRITE_DEFAULT_CONTAINER_IMAGE"],
		[name: "documentation-brainscales2",
		 job: "doc_gerrit_documentation-brainscales2-dependencies",
		 container_image_parameter: "OVERWRITE_DEFAULT_CONTAINER_IMAGE"],
		// Visionary KiCad library
		[name: "pcb-kicad-lib",
		 job: "bld_gerrit_pcb-kicad-lib_dependencies",
		 container_image_parameter: "OVERWRITE_DEFAULT_CONTAINER_IMAGE"],
		// Visionary lab tools
		[name: "labcontrol",
		 job: "bld_gerrit_labcontrol_dependencies",
		 container_image_parameter: "OVERWRITE_DEFAULT_CONTAINER_IMAGE"]
	],
	asic: [
		[name: "tools-xilinx",
		 job: "bld_gerrit_tools-xilinx_dependencies",
		 container_image_parameter: "OVERWRITE_DEFAULT_ASIC_CONTAINER_IMAGE"]
	]
]

pipeline {
	agent { label 'conviz1||conviz2' }

	options {
		timestamps()
		skipDefaultCheckout()
	}

	environment {
		YASHCHIKI_INSTALL = "${WORKSPACE}/yashchiki"
		YASHCHIKI_META_DIR = "${WORKSPACE}/meta"
	}

	stages {
		stage('Container Build') {
			// TODO: remove once unused
			environment {
				CONTAINER_STYLE = "${params.CONTAINER_STYLE}"
				YASHCHIKI_CACHES_ROOT = "${HOME}"
				YASHCHIKI_SPACK_PATH = "${env.WORKSPACE}/spack"
				YASHCHIKI_SANDBOXES = "sandboxes"
				YASHCHIKI_BUILD_CACHE_ON_FAILURE_NAME = get_build_cache_on_failure_name()
				YASHCHIKI_IMAGE_NAME = "singularity_temp.img"
			}
			stages {
				stage('Pre-build Cleanup') {
					steps {
						script {
							cleanupSteps()
						}
					}
				}
				stage('yashchiki Checkout') {
					steps {
						script {
							sh "git clone ssh://hudson@brainscales-r.kip.uni-heidelberg.de:29418/waf.git symwaf2ic"
							sh "cd symwaf2ic && singularity exec /containers/stable/latest make"
							if (!env.GERRIT_CHANGE_NUMBER) {
								sh "singularity exec /containers/stable/latest ./symwaf2ic/waf setup --project=yashchiki --clone-depth=2"
							} else {
								sh "singularity exec /containers/stable/latest ./symwaf2ic/waf setup --project=yashchiki --clone-depth=2 --gerrit-changes=${GERRIT_CHANGE_NUMBER} --gerrit-url=ssh://hudson@${GERRIT_HOST}:${GERRIT_PORT}"
							}
							sh "singularity exec /containers/stable/latest ./symwaf2ic/waf configure install"
						}
					}
				}
				stage('Dump Meta Info') {
					steps {
						sh "mkdir -p ${YASHCHIKI_META_DIR}"
						sh "bash bin/yashchiki_dump_meta_info.sh"
						script {
							if (isTriggeredByGerrit()) {
								sh "bash bin/yashchiki_notify_gerrit.sh -m 'Build containing this change started..'"
							}
						}
					}
				}
				stage('Deploy utilities') {
					steps {
						sh "bash bin/yashchiki_deploy_utilities.sh"
					}
				}
				stage('Build container image') {
					steps {
						script {
							// extract options from gerrit comment
							boolean with_debug = false
							boolean with_spack_verbose = false
							String build_cache_name = "${params.BUILD_CACHE_NAME}"
							if (isTriggeredByGerrit()) {
								gerrit_comment = jesh(script: "echo '${GERRIT_EVENT_COMMENT_TEXT}' | base64 -d", returnStdout: true)
								with_debug = gerrit_comment.contains("WITH_DEBUG")
								with_spack_verbose = gerrit_comment.contains("WITH_SPACK_VERBOSE")
								build_cache_name = jesh(script: "bash bin/yashchiki_get_build_cache_name.sh", returnStdout: true).trim()
							}

							sh "python3 bin/yashchiki ${CONTAINER_STYLE} ${WORKSPACE}/spack ${YASHCHIKI_IMAGE_NAME} " +
							   "--log-dir=log " +
							   "--tmp-subdir=${env.NODE_NAME} " +
							   "--meta-dir=${YASHCHIKI_META_DIR} " +
							   "--caches-dir=${YASHCHIKI_CACHES_ROOT} " +
							   "--sandboxes-dir=${YASHCHIKI_SANDBOXES} " +
							   "--build-cache-name=${build_cache_name} " +
							   ("${CONTAINER_BUILD_TYPE}" == "stable" ? "--update-build-cache " : "") +
							   "--recipe-filename=${WORKSPACE}/visionary_recipe.def " +
							   "--build-cache-on-failure-name=${YASHCHIKI_BUILD_CACHE_ON_FAILURE_NAME} " +
							   (with_debug ? "--debug " : "") +
							   (with_spack_verbose ? "--spack-verbose " : "") +
							   "--jobs=" + jesh(script: "nproc", returnStdout: true).trim() + " "
						}
					}
				}
				stage('Export container') {
					steps {
						script {
							// we only want the container name, tail everything else
							CONTAINER_IMAGE = sh(script: "bash bin/yashchiki_deploy_container.sh | tail -n 1", returnStdout: true).trim()
							if (isTriggeredByGerrit()) {
								sh "bash bin/yashchiki_notify_gerrit.sh -t Build -c \"$CONTAINER_IMAGE\""
							}
						}
					}
				}
			}
			post {
				failure {
					script {
						cache_failed = sh(script: "bash bin/yashchiki_create_temporary_build_cache_after_failure.sh", returnStdout: true).trim()
						if (isTriggeredByGerrit()) {
							sh "bash bin/yashchiki_notify_gerrit.sh -v -1 -t Build -m \"Successfully built packages stored in cache. Resume by issuing:\nWITH_CACHE_NAME=${cache_failed}\n\nIn your next gerrit comment, NOT commit message!\""
						}
					}
				}
				cleanup {
					archiveArtifacts "out_singularity_build_recipe.txt"
					archiveArtifacts(artifacts: "errors_concretization.log", allowEmptyArchive: true)
					archiveArtifacts(artifacts: "sandboxes/*/opt/spack_specs/*.yaml", allowEmptyArchive: true)
					archiveArtifacts(artifacts: "log/*.log", allowEmptyArchive: true)
				}
			}
		}

		// Container verification stage: Build visionary metaprojects
		stage('Container Verification') {
			steps {
				script {
					def branches = [:]
					verificationStages[params.CONTAINER_STYLE].each {
						project -> branches[project.name] = {
							build(job: project.job,
							      parameters: [string(name: project.container_image_parameter, value: CONTAINER_IMAGE)])
						}
					}
					parallel branches
				}
			}
			post {
				success {
					script {
						if (isTriggeredByGerrit()) {
							jesh "bash bin/yashchiki_notify_gerrit.sh -v 1 -t Tests -c '${CONTAINER_IMAGE}'"
						}
					}
				}
				unstable {
					script {
						if (isTriggeredByGerrit()) {
							jesh "bash bin/yashchiki_notify_gerrit.sh -v 0 -t Tests -c '${CONTAINER_IMAGE}'"
						}
					}
				}
				failure {
					script {
						if (isTriggeredByGerrit()) {
							jesh "bash bin/yashchiki_notify_gerrit.sh -v -1 -t Tests -c '${CONTAINER_IMAGE}'"
						}
					}
				}
			}
		}
	}
	post {
		failure {
			notifyFailure(mattermostChannel: "#spack")
		}
		cleanup {
			// Clean build artifacts because otherwise the latest build from each jenkins job can take up to 50GB.
			// 2 executors and 5 Jenkins-Jobs (testing, testing-spack, testing-asic, stable, stable-asic) will slowly but surely eat away memory.
			script {
				cleanupSteps()
			}
		}
	}
}

String get_build_cache_on_failure_name() {
	return (CONTAINER_BUILD_TYPE == "testing" ? "c${GERRIT_CHANGE_NUMBER}p${GERRIT_PATCHSET_NUMBER}" : jesh(script: "echo -n 'stable_\$(date --iso)'", returnStdout: true))
}
